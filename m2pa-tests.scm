;;;
;;; Copyright (c) 2011 Michael Tuexen
;;; All rights reserved.
;;;
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.
;;;
;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.
;;;
;;; $Id: m2pa-tests.scm,v 1.11 2011/03/22 19:03:00 tuexen Exp $

(define (m2pa-test-001 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (let* ((message (m2pa-wait-for-message fd m2pa-sltm-message?))
	   (sltm (m2pa-get-sif message)))
      (m2pa-send-message fd 1 (m2pa-make-slta-message 0 0 (mtp-make-slta-from-sltm sltm)))
      (m2pa-wait-for-message fd m2pa-user-data-message?))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 1 sltm))
    (m2pa-wait-for-message fd m2pa-slta-message?)
    (m2pa-send-message fd 1 (m2pa-make-user-data-message 1 1 (list)))
    (sleep 1)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-algn-v-01 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (let ((message (m2pa-wait-for-message fd m2pa-out-of-service-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-v-02 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (let ((message (m2pa-wait-for-message fd m2pa-alignment-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-v-03 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (let ((message (m2pa-wait-for-message fd m2pa-proving-normal-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-v-04 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (let ((message (m2pa-wait-for-message fd m2pa-proving-emergency-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-v-05 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-emergency-state (list)))
    (let ((message (m2pa-wait-for-message fd m2pa-proving-emergency-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-v-06 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (let ((message (m2pa-wait-for-message fd m2pa-ready-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-v-07 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-emergency-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-emergency-state (list)))
    (let ((message (m2pa-wait-for-message fd m2pa-ready-message?)))
      (close fd)
      (if (m2pa-check-common-header message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))


(define (m2pa-algn-i-01 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port)))
	(message (append (m2pa-make-common-header (+ m2pa-version 1) m2pa-spare m2pa-message-class m2pa-link-status-type 20)
			 (m2pa-make-m2pa-header m2pa-unused #xffffff m2pa-unused 0)
			 (uint32->bytes m2pa-out-of-service-state))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 message)
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-alignment-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-i-02 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port)))
	(message (append (m2pa-make-common-header m2pa-version (+ m2pa-spare 1) m2pa-message-class m2pa-link-status-type 20)
			 (m2pa-make-m2pa-header m2pa-unused #xffffff m2pa-unused 0)
			 (uint32->bytes m2pa-out-of-service-state))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 message)
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-algn-i-03 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port)))
	(message (append (m2pa-make-common-header m2pa-version m2pa-spare (+ m2pa-message-class 1) m2pa-link-status-type 20)
			 (m2pa-make-m2pa-header m2pa-unused #xffffff m2pa-unused 0)
			 (uint32->bytes m2pa-out-of-service-state))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 message)
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-alignment-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-i-04 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port)))
	(message (append (m2pa-make-common-header m2pa-version m2pa-spare m2pa-message-class (+ m2pa-link-status-type 2) 20)
			 (m2pa-make-m2pa-header m2pa-unused #xffffff m2pa-unused 0)
			 (uint32->bytes m2pa-out-of-service-state))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 message)
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-alignment-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-algn-i-05 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port)))
	(message (append (m2pa-make-common-header m2pa-version m2pa-spare m2pa-message-class m2pa-link-status-type 1600000)
			 (m2pa-make-m2pa-header m2pa-unused #xffffff m2pa-unused 0)
			 (uint32->bytes m2pa-out-of-service-state))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 message)
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-alignment-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))


(define (m2pa-algn-o-01 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-algn-o-02 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-emergency-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-algn-o-03 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-algn-o-04 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-user-data-message #xffffff 0 (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-algn-o-05 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 1 (m2pa-make-sltm-message #xffffff 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-sctp-v-01 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message #xffffff 0 sltm))
    (m2pa-wait-for-message-on-stream fd m2pa-slta-message? 1)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-sctp-v-02 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-sctp-v-03 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message-on-stream fd m2pa-out-of-service-message? 0)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message-on-stream fd m2pa-alignment-message? 0)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message-on-stream fd m2pa-proving-normal-message? 0)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message-on-stream fd m2pa-ready-message? 0)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-sctp-v-04 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (do ((message (m2pa-recv-message fd) (m2pa-recv-message fd)))
	((or (null? message) (m2pa-link-status-message? message)))
      (m2pa-send-message fd 1 (m2pa-make-user-data-message (m2pa-get-message-fsn message) #xffffff (list))))
    (m2pa-wait-for-message-on-stream fd m2pa-busy-message? 0)
    (m2pa-wait-for-message-on-stream fd m2pa-busy-ended-message? 0)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-sctp-v-05 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-outage-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-recovered-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message-on-stream fd m2pa-ready-message? 1)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-sctp-v-06 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (do ((message (m2pa-recv-message fd) (m2pa-recv-message fd)))
	((or (null? message) (m2pa-link-status-message? message)))
      (m2pa-send-message fd 1 (m2pa-make-user-data-message (m2pa-get-message-fsn message) #xffffff (list))))
    (m2pa-wait-for-message-on-stream fd m2pa-processor-outage-message? 1)
    (m2pa-wait-for-message-on-stream fd m2pa-processor-outage-recovered-message? 1)
    (m2pa-wait-for-message-on-stream fd m2pa-processor-ready-message? 1)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-sctp-v-07 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message #xffffff 0 sltm))
    (m2pa-wait-for-message-on-stream fd m2pa-slta-message? 1)
    (close fd)
    m2pa-test-result-passed))

(define (m2pa-msg-v-01 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 10)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-v-02 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 10)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-03 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-user-data-message 0 0 (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 10)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-04 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-slta-message? 1)))
      (close fd)
      (if (= (m2pa-get-message-bsn message) 0)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-05 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (let* ((message (m2pa-wait-for-message fd m2pa-sltm-message?))
	   (slta (mtp-make-slta-from-sltm (m2pa-get-sif message))))
      (m2pa-send-message fd 1 (m2pa-make-slta-message 0 0 slta))
      (let* ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
	(close fd)
	(if (= (length message) 16)
	    (if (= (m2pa-get-message-bsn message) 0)
		m2pa-test-result-passed
		m2pa-test-result-failed)
	    m2pa-test-result-unknown)))))

(define (m2pa-msg-v-06 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message 0 0 m2pa-busy-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (= (length message) 16)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-07 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message 0 0 m2pa-busy-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (and (= (length message) 16)
	       (= (m2pa-get-message-bsn message) 0))
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-08 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message 0 0 m2pa-busy-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (m2pa-wait-for-message fd m2pa-user-data-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message 0 0 m2pa-busy-ended-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-slta-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-v-09 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message 0 0 m2pa-busy-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-out-of-service-message? 10)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-v-10 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-outage-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (= (length message) 16)
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-11 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-outage-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (and (= (length message) 16)
	       (= (m2pa-get-message-bsn message) 0))
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-v-12 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-outage-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (m2pa-wait-for-message fd m2pa-user-data-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-recovered-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-ready-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-v-13 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message 0 0 m2pa-processor-outage-state (list)))
    (m2pa-send-message fd 1 (m2pa-make-sltm-message 0 0 sltm))
    (m2pa-wait-for-message fd m2pa-user-data-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-processor-recovered-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 1 (m2pa-make-link-status-message 0 0 m2pa-ready-state (list)))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-slta-message? 1)))
      (close fd)
      (if (null? message)
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-i-01 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd
		       1
		       (append (m2pa-make-common-header (+ m2pa-version 1) m2pa-spare m2pa-message-class m2pa-user-data-type (+ 8 8 2 (length sltm)))
			       (m2pa-make-m2pa-header m2pa-unused 0 m2pa-unused 0)
			       (cons m2pa-priority (cons (+ mtp-si-sntm (* mtp-ssf-int 2^4)) sltm))))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (and (>= (length message) 16)
	       (= (m2pa-get-message-bsn message) 0))
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-i-02 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd
		       1
		       (append (m2pa-make-common-header m2pa-version (+ m2pa-spare 1) m2pa-message-class m2pa-user-data-type (+ 8 8 2 (length sltm)))
			       (m2pa-make-m2pa-header m2pa-unused 0 m2pa-unused 0)
			       (cons m2pa-priority (cons (+ mtp-si-sntm (* mtp-ssf-int 2^4)) sltm))))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (and (>= (length message) 16)
	       (= (m2pa-get-message-bsn message) 0))
	  m2pa-test-result-passed
	  m2pa-test-result-failed))))

(define (m2pa-msg-i-03 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd
		       1
		       (append (m2pa-make-common-header m2pa-version m2pa-spare (+ m2pa-message-class 1) m2pa-user-data-type (+ 8 8 2 (length sltm)))
			       (m2pa-make-m2pa-header m2pa-unused 0 m2pa-unused 0)
			       (cons m2pa-priority (cons (+ mtp-si-sntm (* mtp-ssf-int 2^4)) sltm))))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (and (>= (length message) 16)
	       (= (m2pa-get-message-bsn message) 0))
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))

(define (m2pa-msg-i-04 tester-addr tester-port sut-addr sut-port)
  (let ((fd (if sut-is-server
		(m2pa-connect tester-addr tester-port sut-addr sut-port)
		(m2pa-accept tester-addr tester-port))))
    (m2pa-wait-for-message fd m2pa-out-of-service-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-out-of-service-state (list)))
    (m2pa-wait-for-message fd m2pa-alignment-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-alignment-state (list)))
    (m2pa-wait-for-message fd m2pa-proving-normal-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-proving-normal-state (list)))
    (m2pa-wait-for-message fd m2pa-ready-message?)
    (m2pa-send-message fd 0 (m2pa-make-link-status-message #xffffff 0 m2pa-ready-state (list)))
    (m2pa-wait-for-message fd m2pa-sltm-message?)
    (m2pa-send-message fd
		       1
		       (append (m2pa-make-common-header m2pa-version m2pa-spare m2pa-message-class m2pa-user-data-type (+ 8 8 2 10000 (length sltm)))
			       (m2pa-make-m2pa-header m2pa-unused 0 m2pa-unused 0)
			       (cons m2pa-priority (cons (+ mtp-si-sntm (* mtp-ssf-int 2^4)) sltm))))
    (let ((message (m2pa-wait-for-message-with-timeout fd m2pa-user-data-message? 1)))
      (close fd)
      (if (and (>= (length message) 16)
	       (= (m2pa-get-message-bsn message) 0))
	  m2pa-test-result-failed
	  m2pa-test-result-passed))))
